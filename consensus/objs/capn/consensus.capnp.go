// Code generated by capnpc-go. DO NOT EDIT.

package capn

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

// Constants defined in consensus.capnp.
const (
	DefaultRound              = uint32(0)
	DefaultHeight             = uint32(0)
	DefaultChainID            = uint32(0)
	DefaultNumberTransactions = uint32(0)
)

// Constants defined in consensus.capnp.
var (
	DefaultRClaims      = RClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[0:48]).Struct()}
	DefaultBClaims      = BClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[48:144]).Struct()}
	DefaultRCert        = RCert{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[144:216]).Struct()}
	DefaultPClaims      = PClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[216:384]).Struct()}
	DefaultNRClaims     = NRClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[384:520]).Struct()}
	DefaultProposal     = Proposal{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[520:720]).Struct()}
	DefaultNHClaims     = NHClaims{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[720:944]).Struct()}
	DefaultPreVote      = PreVote{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[944:1168]).Struct()}
	DefaultPreCommit    = PreCommit{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1168:1408]).Struct()}
	DefaultPreVoteNil   = PreVoteNil{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1408:1504]).Struct()}
	DefaultPreCommitNil = PreCommitNil{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1504:1600]).Struct()}
	DefaultNextRound    = NextRound{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1600:1760]).Struct()}
	DefaultNextHeight   = NextHeight{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[1760:2024]).Struct()}
	DefaultBlockHeader  = BlockHeader{Struct: capnp.MustUnmarshalRootPtr(x_85d3acc39d94e0f8[2024:2160]).Struct()}
)

func init() {
	// Set traversal limit for constants as Uint64Max since they're safe from amplification attacks.
	DefaultRClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultBClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultRCert.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNRClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultProposal.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNHClaims.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreVote.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreCommit.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreVoteNil.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultPreCommitNil.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNextRound.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultNextHeight.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
	DefaultBlockHeader.Segment().Message().ReadLimiter().Reset((1 << 64) - 1)
}

type RClaims struct{ capnp.Struct }

// RClaims_TypeID is the unique identifier for the type RClaims.
const RClaims_TypeID = 0xb23998c63938dd88

func NewRClaims(s *capnp.Segment) (RClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RClaims{st}, err
}

func NewRootRClaims(s *capnp.Segment) (RClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RClaims{st}, err
}

func ReadRootRClaims(msg *capnp.Message) (RClaims, error) {
	root, err := msg.RootPtr()
	return RClaims{root.Struct()}, err
}

func (s RClaims) String() string {
	str, _ := text.Marshal(0xb23998c63938dd88, s.Struct)
	return str
}

func (s RClaims) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s RClaims) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s RClaims) Height() uint32 {
	return s.Struct.Uint32(4)
}

func (s RClaims) SetHeight(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s RClaims) Round() uint32 {
	return s.Struct.Uint32(8)
}

func (s RClaims) SetRound(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s RClaims) PrevBlock() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RClaims) HasPrevBlock() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RClaims) SetPrevBlock(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}

// RClaims_List is a list of RClaims.
type RClaims_List struct{ capnp.List }

// NewRClaims creates a new list of RClaims.
func NewRClaims_List(s *capnp.Segment, sz int32) (RClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return RClaims_List{l}, err
}

func (s RClaims_List) At(i int) RClaims { return RClaims{s.List.Struct(i)} }

func (s RClaims_List) Set(i int, v RClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s RClaims_List) String() string {
	str, _ := text.MarshalList(0xb23998c63938dd88, s.List)
	return str
}

// RClaims_Promise is a wrapper for a RClaims promised by a client call.
type RClaims_Promise struct{ *capnp.Pipeline }

func (p RClaims_Promise) Struct() (RClaims, error) {
	s, err := p.Pipeline.Struct()
	return RClaims{s}, err
}

type RCert struct{ capnp.Struct }

// RCert_TypeID is the unique identifier for the type RCert.
const RCert_TypeID = 0xd7182e49f1abd5dc

func NewRCert(s *capnp.Segment) (RCert, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RCert{st}, err
}

func NewRootRCert(s *capnp.Segment) (RCert, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RCert{st}, err
}

func ReadRootRCert(msg *capnp.Message) (RCert, error) {
	root, err := msg.RootPtr()
	return RCert{root.Struct()}, err
}

func (s RCert) String() string {
	str, _ := text.Marshal(0xd7182e49f1abd5dc, s.Struct)
	return str
}

func (s RCert) RClaims() RClaims {
	if !s.HasRClaims() {
		s.NewRClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2160:2208])
	return RClaims{Struct: ss}
}

func (s RCert) HasRClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RCert) SetRClaims(v RClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRClaims sets the rClaims field to a newly
// allocated RClaims struct, preferring placement in s's segment.
func (s RCert) NewRClaims() (RClaims, error) {
	ss, err := NewRClaims(s.Struct.Segment())
	if err != nil {
		return RClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s RCert) SigGroup() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RCert) HasSigGroup() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RCert) SetSigGroup(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// RCert_List is a list of RCert.
type RCert_List struct{ capnp.List }

// NewRCert creates a new list of RCert.
func NewRCert_List(s *capnp.Segment, sz int32) (RCert_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RCert_List{l}, err
}

func (s RCert_List) At(i int) RCert { return RCert{s.List.Struct(i)} }

func (s RCert_List) Set(i int, v RCert) error { return s.List.SetStruct(i, v.Struct) }

func (s RCert_List) String() string {
	str, _ := text.MarshalList(0xd7182e49f1abd5dc, s.List)
	return str
}

// RCert_Promise is a wrapper for a RCert promised by a client call.
type RCert_Promise struct{ *capnp.Pipeline }

func (p RCert_Promise) Struct() (RCert, error) {
	s, err := p.Pipeline.Struct()
	return RCert{s}, err
}

func (p RCert_Promise) RClaims() RClaims_Promise {
	return RClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[2208:2256])}
}

type BClaims struct{ capnp.Struct }

// BClaims_TypeID is the unique identifier for the type BClaims.
const BClaims_TypeID = 0x9113e3f94e338143

func NewBClaims(s *capnp.Segment) (BClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return BClaims{st}, err
}

func NewRootBClaims(s *capnp.Segment) (BClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return BClaims{st}, err
}

func ReadRootBClaims(msg *capnp.Message) (BClaims, error) {
	root, err := msg.RootPtr()
	return BClaims{root.Struct()}, err
}

func (s BClaims) String() string {
	str, _ := text.Marshal(0x9113e3f94e338143, s.Struct)
	return str
}

func (s BClaims) ChainID() uint32 {
	return s.Struct.Uint32(0)
}

func (s BClaims) SetChainID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BClaims) Height() uint32 {
	return s.Struct.Uint32(4)
}

func (s BClaims) SetHeight(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s BClaims) PrevBlock() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasPrevBlock() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BClaims) SetPrevBlock(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s BClaims) TxCount() uint32 {
	return s.Struct.Uint32(8)
}

func (s BClaims) SetTxCount(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s BClaims) TxRoot() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasTxRoot() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BClaims) SetTxRoot(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s BClaims) StateRoot() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasStateRoot() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BClaims) SetStateRoot(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s BClaims) HeaderRoot() []byte {
	p, _ := s.Struct.Ptr(3)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BClaims) HasHeaderRoot() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s BClaims) SetHeaderRoot(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(3, v)
}

// BClaims_List is a list of BClaims.
type BClaims_List struct{ capnp.List }

// NewBClaims creates a new list of BClaims.
func NewBClaims_List(s *capnp.Segment, sz int32) (BClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return BClaims_List{l}, err
}

func (s BClaims_List) At(i int) BClaims { return BClaims{s.List.Struct(i)} }

func (s BClaims_List) Set(i int, v BClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s BClaims_List) String() string {
	str, _ := text.MarshalList(0x9113e3f94e338143, s.List)
	return str
}

// BClaims_Promise is a wrapper for a BClaims promised by a client call.
type BClaims_Promise struct{ *capnp.Pipeline }

func (p BClaims_Promise) Struct() (BClaims, error) {
	s, err := p.Pipeline.Struct()
	return BClaims{s}, err
}

type PClaims struct{ capnp.Struct }

// PClaims_TypeID is the unique identifier for the type PClaims.
const PClaims_TypeID = 0x9a7cf3b8ccdd561f

func NewPClaims(s *capnp.Segment) (PClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PClaims{st}, err
}

func NewRootPClaims(s *capnp.Segment) (PClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PClaims{st}, err
}

func ReadRootPClaims(msg *capnp.Message) (PClaims, error) {
	root, err := msg.RootPtr()
	return PClaims{root.Struct()}, err
}

func (s PClaims) String() string {
	str, _ := text.Marshal(0x9a7cf3b8ccdd561f, s.Struct)
	return str
}

func (s PClaims) BClaims() BClaims {
	if !s.HasBClaims() {
		s.NewBClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2256:2352])
	return BClaims{Struct: ss}
}

func (s PClaims) HasBClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PClaims) SetBClaims(v BClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBClaims sets the bClaims field to a newly
// allocated BClaims struct, preferring placement in s's segment.
func (s PClaims) NewBClaims() (BClaims, error) {
	ss, err := NewBClaims(s.Struct.Segment())
	if err != nil {
		return BClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PClaims) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(1)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2352:2424])
	return RCert{Struct: ss}
}

func (s PClaims) HasRCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PClaims) SetRCert(v RCert) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s PClaims) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PClaims_List is a list of PClaims.
type PClaims_List struct{ capnp.List }

// NewPClaims creates a new list of PClaims.
func NewPClaims_List(s *capnp.Segment, sz int32) (PClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PClaims_List{l}, err
}

func (s PClaims_List) At(i int) PClaims { return PClaims{s.List.Struct(i)} }

func (s PClaims_List) Set(i int, v PClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s PClaims_List) String() string {
	str, _ := text.MarshalList(0x9a7cf3b8ccdd561f, s.List)
	return str
}

// PClaims_Promise is a wrapper for a PClaims promised by a client call.
type PClaims_Promise struct{ *capnp.Pipeline }

func (p PClaims_Promise) Struct() (PClaims, error) {
	s, err := p.Pipeline.Struct()
	return PClaims{s}, err
}

func (p PClaims_Promise) BClaims() BClaims_Promise {
	return BClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[2424:2520])}
}

func (p PClaims_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(1, x_85d3acc39d94e0f8[2520:2592])}
}

type Proposal struct{ capnp.Struct }

// Proposal_TypeID is the unique identifier for the type Proposal.
const Proposal_TypeID = 0x9af13d67202e38f8

func NewProposal(s *capnp.Segment) (Proposal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Proposal{st}, err
}

func NewRootProposal(s *capnp.Segment) (Proposal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Proposal{st}, err
}

func ReadRootProposal(msg *capnp.Message) (Proposal, error) {
	root, err := msg.RootPtr()
	return Proposal{root.Struct()}, err
}

func (s Proposal) String() string {
	str, _ := text.Marshal(0x9af13d67202e38f8, s.Struct)
	return str
}

func (s Proposal) PClaims() PClaims {
	if !s.HasPClaims() {
		s.NewPClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2592:2760])
	return PClaims{Struct: ss}
}

func (s Proposal) HasPClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Proposal) SetPClaims(v PClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPClaims sets the pClaims field to a newly
// allocated PClaims struct, preferring placement in s's segment.
func (s Proposal) NewPClaims() (PClaims, error) {
	ss, err := NewPClaims(s.Struct.Segment())
	if err != nil {
		return PClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s Proposal) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Proposal) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Proposal) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s Proposal) TxHshLst() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Proposal) HasTxHshLst() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Proposal) SetTxHshLst(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// Proposal_List is a list of Proposal.
type Proposal_List struct{ capnp.List }

// NewProposal creates a new list of Proposal.
func NewProposal_List(s *capnp.Segment, sz int32) (Proposal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Proposal_List{l}, err
}

func (s Proposal_List) At(i int) Proposal { return Proposal{s.List.Struct(i)} }

func (s Proposal_List) Set(i int, v Proposal) error { return s.List.SetStruct(i, v.Struct) }

func (s Proposal_List) String() string {
	str, _ := text.MarshalList(0x9af13d67202e38f8, s.List)
	return str
}

// Proposal_Promise is a wrapper for a Proposal promised by a client call.
type Proposal_Promise struct{ *capnp.Pipeline }

func (p Proposal_Promise) Struct() (Proposal, error) {
	s, err := p.Pipeline.Struct()
	return Proposal{s}, err
}

func (p Proposal_Promise) PClaims() PClaims_Promise {
	return PClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[2760:2928])}
}

type PreVote struct{ capnp.Struct }

// PreVote_TypeID is the unique identifier for the type PreVote.
const PreVote_TypeID = 0xd6c749583b4cc63a

func NewPreVote(s *capnp.Segment) (PreVote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVote{st}, err
}

func NewRootPreVote(s *capnp.Segment) (PreVote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVote{st}, err
}

func ReadRootPreVote(msg *capnp.Message) (PreVote, error) {
	root, err := msg.RootPtr()
	return PreVote{root.Struct()}, err
}

func (s PreVote) String() string {
	str, _ := text.Marshal(0xd6c749583b4cc63a, s.Struct)
	return str
}

func (s PreVote) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[2928:3128])
	return Proposal{Struct: ss}
}

func (s PreVote) HasProposal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreVote) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s PreVote) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreVote) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreVote) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreVote) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// PreVote_List is a list of PreVote.
type PreVote_List struct{ capnp.List }

// NewPreVote creates a new list of PreVote.
func NewPreVote_List(s *capnp.Segment, sz int32) (PreVote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PreVote_List{l}, err
}

func (s PreVote_List) At(i int) PreVote { return PreVote{s.List.Struct(i)} }

func (s PreVote_List) Set(i int, v PreVote) error { return s.List.SetStruct(i, v.Struct) }

func (s PreVote_List) String() string {
	str, _ := text.MarshalList(0xd6c749583b4cc63a, s.List)
	return str
}

// PreVote_Promise is a wrapper for a PreVote promised by a client call.
type PreVote_Promise struct{ *capnp.Pipeline }

func (p PreVote_Promise) Struct() (PreVote, error) {
	s, err := p.Pipeline.Struct()
	return PreVote{s}, err
}

func (p PreVote_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3128:3328])}
}

type PreVoteNil struct{ capnp.Struct }

// PreVoteNil_TypeID is the unique identifier for the type PreVoteNil.
const PreVoteNil_TypeID = 0xdcd451184d295c70

func NewPreVoteNil(s *capnp.Segment) (PreVoteNil, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVoteNil{st}, err
}

func NewRootPreVoteNil(s *capnp.Segment) (PreVoteNil, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreVoteNil{st}, err
}

func ReadRootPreVoteNil(msg *capnp.Message) (PreVoteNil, error) {
	root, err := msg.RootPtr()
	return PreVoteNil{root.Struct()}, err
}

func (s PreVoteNil) String() string {
	str, _ := text.Marshal(0xdcd451184d295c70, s.Struct)
	return str
}

func (s PreVoteNil) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[3328:3400])
	return RCert{Struct: ss}
}

func (s PreVoteNil) HasRCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreVoteNil) SetRCert(v RCert) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s PreVoteNil) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreVoteNil) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreVoteNil) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreVoteNil) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// PreVoteNil_List is a list of PreVoteNil.
type PreVoteNil_List struct{ capnp.List }

// NewPreVoteNil creates a new list of PreVoteNil.
func NewPreVoteNil_List(s *capnp.Segment, sz int32) (PreVoteNil_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PreVoteNil_List{l}, err
}

func (s PreVoteNil_List) At(i int) PreVoteNil { return PreVoteNil{s.List.Struct(i)} }

func (s PreVoteNil_List) Set(i int, v PreVoteNil) error { return s.List.SetStruct(i, v.Struct) }

func (s PreVoteNil_List) String() string {
	str, _ := text.MarshalList(0xdcd451184d295c70, s.List)
	return str
}

// PreVoteNil_Promise is a wrapper for a PreVoteNil promised by a client call.
type PreVoteNil_Promise struct{ *capnp.Pipeline }

func (p PreVoteNil_Promise) Struct() (PreVoteNil, error) {
	s, err := p.Pipeline.Struct()
	return PreVoteNil{s}, err
}

func (p PreVoteNil_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3400:3472])}
}

type PreCommit struct{ capnp.Struct }

// PreCommit_TypeID is the unique identifier for the type PreCommit.
const PreCommit_TypeID = 0x962a57a2c30ab3cc

func NewPreCommit(s *capnp.Segment) (PreCommit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PreCommit{st}, err
}

func NewRootPreCommit(s *capnp.Segment) (PreCommit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PreCommit{st}, err
}

func ReadRootPreCommit(msg *capnp.Message) (PreCommit, error) {
	root, err := msg.RootPtr()
	return PreCommit{root.Struct()}, err
}

func (s PreCommit) String() string {
	str, _ := text.Marshal(0x962a57a2c30ab3cc, s.Struct)
	return str
}

func (s PreCommit) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[3472:3672])
	return Proposal{Struct: ss}
}

func (s PreCommit) HasProposal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreCommit) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s PreCommit) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreCommit) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreCommit) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreCommit) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s PreCommit) PreVotes() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreCommit) HasPreVotes() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PreCommit) SetPreVotes(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// PreCommit_List is a list of PreCommit.
type PreCommit_List struct{ capnp.List }

// NewPreCommit creates a new list of PreCommit.
func NewPreCommit_List(s *capnp.Segment, sz int32) (PreCommit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return PreCommit_List{l}, err
}

func (s PreCommit_List) At(i int) PreCommit { return PreCommit{s.List.Struct(i)} }

func (s PreCommit_List) Set(i int, v PreCommit) error { return s.List.SetStruct(i, v.Struct) }

func (s PreCommit_List) String() string {
	str, _ := text.MarshalList(0x962a57a2c30ab3cc, s.List)
	return str
}

// PreCommit_Promise is a wrapper for a PreCommit promised by a client call.
type PreCommit_Promise struct{ *capnp.Pipeline }

func (p PreCommit_Promise) Struct() (PreCommit, error) {
	s, err := p.Pipeline.Struct()
	return PreCommit{s}, err
}

func (p PreCommit_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3672:3872])}
}

type PreCommitNil struct{ capnp.Struct }

// PreCommitNil_TypeID is the unique identifier for the type PreCommitNil.
const PreCommitNil_TypeID = 0x99e482280ba39765

func NewPreCommitNil(s *capnp.Segment) (PreCommitNil, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreCommitNil{st}, err
}

func NewRootPreCommitNil(s *capnp.Segment) (PreCommitNil, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PreCommitNil{st}, err
}

func ReadRootPreCommitNil(msg *capnp.Message) (PreCommitNil, error) {
	root, err := msg.RootPtr()
	return PreCommitNil{root.Struct()}, err
}

func (s PreCommitNil) String() string {
	str, _ := text.Marshal(0x99e482280ba39765, s.Struct)
	return str
}

func (s PreCommitNil) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[3872:3944])
	return RCert{Struct: ss}
}

func (s PreCommitNil) HasRCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PreCommitNil) SetRCert(v RCert) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s PreCommitNil) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s PreCommitNil) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s PreCommitNil) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PreCommitNil) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// PreCommitNil_List is a list of PreCommitNil.
type PreCommitNil_List struct{ capnp.List }

// NewPreCommitNil creates a new list of PreCommitNil.
func NewPreCommitNil_List(s *capnp.Segment, sz int32) (PreCommitNil_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PreCommitNil_List{l}, err
}

func (s PreCommitNil_List) At(i int) PreCommitNil { return PreCommitNil{s.List.Struct(i)} }

func (s PreCommitNil_List) Set(i int, v PreCommitNil) error { return s.List.SetStruct(i, v.Struct) }

func (s PreCommitNil_List) String() string {
	str, _ := text.MarshalList(0x99e482280ba39765, s.List)
	return str
}

// PreCommitNil_Promise is a wrapper for a PreCommitNil promised by a client call.
type PreCommitNil_Promise struct{ *capnp.Pipeline }

func (p PreCommitNil_Promise) Struct() (PreCommitNil, error) {
	s, err := p.Pipeline.Struct()
	return PreCommitNil{s}, err
}

func (p PreCommitNil_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[3944:4016])}
}

type NRClaims struct{ capnp.Struct }

// NRClaims_TypeID is the unique identifier for the type NRClaims.
const NRClaims_TypeID = 0xa5bcb08c7a601f19

func NewNRClaims(s *capnp.Segment) (NRClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NRClaims{st}, err
}

func NewRootNRClaims(s *capnp.Segment) (NRClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NRClaims{st}, err
}

func ReadRootNRClaims(msg *capnp.Message) (NRClaims, error) {
	root, err := msg.RootPtr()
	return NRClaims{root.Struct()}, err
}

func (s NRClaims) String() string {
	str, _ := text.Marshal(0xa5bcb08c7a601f19, s.Struct)
	return str
}

func (s NRClaims) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4016:4088])
	return RCert{Struct: ss}
}

func (s NRClaims) HasRCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NRClaims) SetRCert(v RCert) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s NRClaims) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NRClaims) RClaims() RClaims {
	if !s.HasRClaims() {
		s.NewRClaims()
	}
	p, _ := s.Struct.Ptr(1)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4088:4136])
	return RClaims{Struct: ss}
}

func (s NRClaims) HasRClaims() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NRClaims) SetRClaims(v RClaims) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRClaims sets the rClaims field to a newly
// allocated RClaims struct, preferring placement in s's segment.
func (s NRClaims) NewRClaims() (RClaims, error) {
	ss, err := NewRClaims(s.Struct.Segment())
	if err != nil {
		return RClaims{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}
func (s NRClaims) SigShare() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NRClaims) HasSigShare() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s NRClaims) SetSigShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// NRClaims_List is a list of NRClaims.
type NRClaims_List struct{ capnp.List }

// NewNRClaims creates a new list of NRClaims.
func NewNRClaims_List(s *capnp.Segment, sz int32) (NRClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return NRClaims_List{l}, err
}

func (s NRClaims_List) At(i int) NRClaims { return NRClaims{s.List.Struct(i)} }

func (s NRClaims_List) Set(i int, v NRClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s NRClaims_List) String() string {
	str, _ := text.MarshalList(0xa5bcb08c7a601f19, s.List)
	return str
}

// NRClaims_Promise is a wrapper for a NRClaims promised by a client call.
type NRClaims_Promise struct{ *capnp.Pipeline }

func (p NRClaims_Promise) Struct() (NRClaims, error) {
	s, err := p.Pipeline.Struct()
	return NRClaims{s}, err
}

func (p NRClaims_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[4136:4208])}
}

func (p NRClaims_Promise) RClaims() RClaims_Promise {
	return RClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(1, x_85d3acc39d94e0f8[4208:4256])}
}

type NextRound struct{ capnp.Struct }

// NextRound_TypeID is the unique identifier for the type NextRound.
const NextRound_TypeID = 0xdf3021ba1919105b

func NewNextRound(s *capnp.Segment) (NextRound, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NextRound{st}, err
}

func NewRootNextRound(s *capnp.Segment) (NextRound, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NextRound{st}, err
}

func ReadRootNextRound(msg *capnp.Message) (NextRound, error) {
	root, err := msg.RootPtr()
	return NextRound{root.Struct()}, err
}

func (s NextRound) String() string {
	str, _ := text.Marshal(0xdf3021ba1919105b, s.Struct)
	return str
}

func (s NextRound) NRClaims() NRClaims {
	if !s.HasNRClaims() {
		s.NewNRClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4256:4392])
	return NRClaims{Struct: ss}
}

func (s NextRound) HasNRClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NextRound) SetNRClaims(v NRClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNRClaims sets the nRClaims field to a newly
// allocated NRClaims struct, preferring placement in s's segment.
func (s NextRound) NewNRClaims() (NRClaims, error) {
	ss, err := NewNRClaims(s.Struct.Segment())
	if err != nil {
		return NRClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NextRound) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NextRound) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NextRound) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// NextRound_List is a list of NextRound.
type NextRound_List struct{ capnp.List }

// NewNextRound creates a new list of NextRound.
func NewNextRound_List(s *capnp.Segment, sz int32) (NextRound_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NextRound_List{l}, err
}

func (s NextRound_List) At(i int) NextRound { return NextRound{s.List.Struct(i)} }

func (s NextRound_List) Set(i int, v NextRound) error { return s.List.SetStruct(i, v.Struct) }

func (s NextRound_List) String() string {
	str, _ := text.MarshalList(0xdf3021ba1919105b, s.List)
	return str
}

// NextRound_Promise is a wrapper for a NextRound promised by a client call.
type NextRound_Promise struct{ *capnp.Pipeline }

func (p NextRound_Promise) Struct() (NextRound, error) {
	s, err := p.Pipeline.Struct()
	return NextRound{s}, err
}

func (p NextRound_Promise) NRClaims() NRClaims_Promise {
	return NRClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[4392:4528])}
}

type NHClaims struct{ capnp.Struct }

// NHClaims_TypeID is the unique identifier for the type NHClaims.
const NHClaims_TypeID = 0xcc032017c6d81c9e

func NewNHClaims(s *capnp.Segment) (NHClaims, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NHClaims{st}, err
}

func NewRootNHClaims(s *capnp.Segment) (NHClaims, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NHClaims{st}, err
}

func ReadRootNHClaims(msg *capnp.Message) (NHClaims, error) {
	root, err := msg.RootPtr()
	return NHClaims{root.Struct()}, err
}

func (s NHClaims) String() string {
	str, _ := text.Marshal(0xcc032017c6d81c9e, s.Struct)
	return str
}

func (s NHClaims) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4528:4728])
	return Proposal{Struct: ss}
}

func (s NHClaims) HasProposal() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NHClaims) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s NHClaims) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NHClaims) SigShare() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NHClaims) HasSigShare() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NHClaims) SetSigShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// NHClaims_List is a list of NHClaims.
type NHClaims_List struct{ capnp.List }

// NewNHClaims creates a new list of NHClaims.
func NewNHClaims_List(s *capnp.Segment, sz int32) (NHClaims_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NHClaims_List{l}, err
}

func (s NHClaims_List) At(i int) NHClaims { return NHClaims{s.List.Struct(i)} }

func (s NHClaims_List) Set(i int, v NHClaims) error { return s.List.SetStruct(i, v.Struct) }

func (s NHClaims_List) String() string {
	str, _ := text.MarshalList(0xcc032017c6d81c9e, s.List)
	return str
}

// NHClaims_Promise is a wrapper for a NHClaims promised by a client call.
type NHClaims_Promise struct{ *capnp.Pipeline }

func (p NHClaims_Promise) Struct() (NHClaims, error) {
	s, err := p.Pipeline.Struct()
	return NHClaims{s}, err
}

func (p NHClaims_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[4728:4928])}
}

type NextHeight struct{ capnp.Struct }

// NextHeight_TypeID is the unique identifier for the type NextHeight.
const NextHeight_TypeID = 0xf15d280e55952413

func NewNextHeight(s *capnp.Segment) (NextHeight, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NextHeight{st}, err
}

func NewRootNextHeight(s *capnp.Segment) (NextHeight, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NextHeight{st}, err
}

func ReadRootNextHeight(msg *capnp.Message) (NextHeight, error) {
	root, err := msg.RootPtr()
	return NextHeight{root.Struct()}, err
}

func (s NextHeight) String() string {
	str, _ := text.Marshal(0xf15d280e55952413, s.Struct)
	return str
}

func (s NextHeight) NHClaims() NHClaims {
	if !s.HasNHClaims() {
		s.NewNHClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[4928:5152])
	return NHClaims{Struct: ss}
}

func (s NextHeight) HasNHClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NextHeight) SetNHClaims(v NHClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNHClaims sets the nHClaims field to a newly
// allocated NHClaims struct, preferring placement in s's segment.
func (s NextHeight) NewNHClaims() (NHClaims, error) {
	ss, err := NewNHClaims(s.Struct.Segment())
	if err != nil {
		return NHClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s NextHeight) Signature() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NextHeight) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NextHeight) SetSignature(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s NextHeight) PreCommits() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s NextHeight) HasPreCommits() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s NextHeight) SetPreCommits(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// NextHeight_List is a list of NextHeight.
type NextHeight_List struct{ capnp.List }

// NewNextHeight creates a new list of NextHeight.
func NewNextHeight_List(s *capnp.Segment, sz int32) (NextHeight_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return NextHeight_List{l}, err
}

func (s NextHeight_List) At(i int) NextHeight { return NextHeight{s.List.Struct(i)} }

func (s NextHeight_List) Set(i int, v NextHeight) error { return s.List.SetStruct(i, v.Struct) }

func (s NextHeight_List) String() string {
	str, _ := text.MarshalList(0xf15d280e55952413, s.List)
	return str
}

// NextHeight_Promise is a wrapper for a NextHeight promised by a client call.
type NextHeight_Promise struct{ *capnp.Pipeline }

func (p NextHeight_Promise) Struct() (NextHeight, error) {
	s, err := p.Pipeline.Struct()
	return NextHeight{s}, err
}

func (p NextHeight_Promise) NHClaims() NHClaims_Promise {
	return NHClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[5152:5376])}
}

type BlockHeader struct{ capnp.Struct }

// BlockHeader_TypeID is the unique identifier for the type BlockHeader.
const BlockHeader_TypeID = 0xcbaccef171f6e853

func NewBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockHeader{st}, err
}

func NewRootBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockHeader{st}, err
}

func ReadRootBlockHeader(msg *capnp.Message) (BlockHeader, error) {
	root, err := msg.RootPtr()
	return BlockHeader{root.Struct()}, err
}

func (s BlockHeader) String() string {
	str, _ := text.Marshal(0xcbaccef171f6e853, s.Struct)
	return str
}

func (s BlockHeader) BClaims() BClaims {
	if !s.HasBClaims() {
		s.NewBClaims()
	}
	p, _ := s.Struct.Ptr(0)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5376:5472])
	return BClaims{Struct: ss}
}

func (s BlockHeader) HasBClaims() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockHeader) SetBClaims(v BClaims) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBClaims sets the bClaims field to a newly
// allocated BClaims struct, preferring placement in s's segment.
func (s BlockHeader) NewBClaims() (BClaims, error) {
	ss, err := NewBClaims(s.Struct.Segment())
	if err != nil {
		return BClaims{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}
func (s BlockHeader) SigGroup() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BlockHeader) HasSigGroup() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockHeader) SetSigGroup(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s BlockHeader) TxHshLst() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s BlockHeader) HasTxHshLst() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockHeader) SetTxHshLst(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}

// BlockHeader_List is a list of BlockHeader.
type BlockHeader_List struct{ capnp.List }

// NewBlockHeader creates a new list of BlockHeader.
func NewBlockHeader_List(s *capnp.Segment, sz int32) (BlockHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return BlockHeader_List{l}, err
}

func (s BlockHeader_List) At(i int) BlockHeader { return BlockHeader{s.List.Struct(i)} }

func (s BlockHeader_List) Set(i int, v BlockHeader) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockHeader_List) String() string {
	str, _ := text.MarshalList(0xcbaccef171f6e853, s.List)
	return str
}

// BlockHeader_Promise is a wrapper for a BlockHeader promised by a client call.
type BlockHeader_Promise struct{ *capnp.Pipeline }

func (p BlockHeader_Promise) Struct() (BlockHeader, error) {
	s, err := p.Pipeline.Struct()
	return BlockHeader{s}, err
}

func (p BlockHeader_Promise) BClaims() BClaims_Promise {
	return BClaims_Promise{Pipeline: p.Pipeline.GetPipelineDefault(0, x_85d3acc39d94e0f8[5472:5568])}
}

type Validator struct{ capnp.Struct }

// Validator_TypeID is the unique identifier for the type Validator.
const Validator_TypeID = 0xfb76cd14c2ae27f8

func NewValidator(s *capnp.Segment) (Validator, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Validator{st}, err
}

func NewRootValidator(s *capnp.Segment) (Validator, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Validator{st}, err
}

func ReadRootValidator(msg *capnp.Message) (Validator, error) {
	root, err := msg.RootPtr()
	return Validator{root.Struct()}, err
}

func (s Validator) String() string {
	str, _ := text.Marshal(0xfb76cd14c2ae27f8, s.Struct)
	return str
}

func (s Validator) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Validator) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Validator) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s Validator) GroupShare() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s Validator) HasGroupShare() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Validator) SetGroupShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

// Validator_List is a list of Validator.
type Validator_List struct{ capnp.List }

// NewValidator creates a new list of Validator.
func NewValidator_List(s *capnp.Segment, sz int32) (Validator_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Validator_List{l}, err
}

func (s Validator_List) At(i int) Validator { return Validator{s.List.Struct(i)} }

func (s Validator_List) Set(i int, v Validator) error { return s.List.SetStruct(i, v.Struct) }

func (s Validator_List) String() string {
	str, _ := text.MarshalList(0xfb76cd14c2ae27f8, s.List)
	return str
}

// Validator_Promise is a wrapper for a Validator promised by a client call.
type Validator_Promise struct{ *capnp.Pipeline }

func (p Validator_Promise) Struct() (Validator, error) {
	s, err := p.Pipeline.Struct()
	return Validator{s}, err
}

type ValidatorSet struct{ capnp.Struct }

// ValidatorSet_TypeID is the unique identifier for the type ValidatorSet.
const ValidatorSet_TypeID = 0xd9941258ffc9401a

func NewValidatorSet(s *capnp.Segment) (ValidatorSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ValidatorSet{st}, err
}

func NewRootValidatorSet(s *capnp.Segment) (ValidatorSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ValidatorSet{st}, err
}

func ReadRootValidatorSet(msg *capnp.Message) (ValidatorSet, error) {
	root, err := msg.RootPtr()
	return ValidatorSet{root.Struct()}, err
}

func (s ValidatorSet) String() string {
	str, _ := text.Marshal(0xd9941258ffc9401a, s.Struct)
	return str
}

func (s ValidatorSet) Validators() (Validator_List, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return Validator_List{}, err
	}
	l, err := p.ListDefault(x_85d3acc39d94e0f8[5568:5592])
	return Validator_List{List: l}, err
}

func (s ValidatorSet) HasValidators() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorSet) SetValidators(v Validator_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValidators sets the validators field to a newly
// allocated Validator_List, preferring placement in s's segment.
func (s ValidatorSet) NewValidators(n int32) (Validator_List, error) {
	l, err := NewValidator_List(s.Struct.Segment(), n)
	if err != nil {
		return Validator_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ValidatorSet) GroupKey() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s ValidatorSet) HasGroupKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ValidatorSet) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s ValidatorSet) NotBefore() uint32 {
	return s.Struct.Uint32(0)
}

func (s ValidatorSet) SetNotBefore(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ValidatorSet) EthHeight() uint32 {
	return s.Struct.Uint32(4)
}

func (s ValidatorSet) SetEthHeight(v uint32) {
	s.Struct.SetUint32(4, v)
}

// ValidatorSet_List is a list of ValidatorSet.
type ValidatorSet_List struct{ capnp.List }

// NewValidatorSet creates a new list of ValidatorSet.
func NewValidatorSet_List(s *capnp.Segment, sz int32) (ValidatorSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return ValidatorSet_List{l}, err
}

func (s ValidatorSet_List) At(i int) ValidatorSet { return ValidatorSet{s.List.Struct(i)} }

func (s ValidatorSet_List) Set(i int, v ValidatorSet) error { return s.List.SetStruct(i, v.Struct) }

func (s ValidatorSet_List) String() string {
	str, _ := text.MarshalList(0xd9941258ffc9401a, s.List)
	return str
}

// ValidatorSet_Promise is a wrapper for a ValidatorSet promised by a client call.
type ValidatorSet_Promise struct{ *capnp.Pipeline }

func (p ValidatorSet_Promise) Struct() (ValidatorSet, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorSet{s}, err
}

type RoundState struct{ capnp.Struct }

// RoundState_TypeID is the unique identifier for the type RoundState.
const RoundState_TypeID = 0xcfa13406e7c64206

func NewRoundState(s *capnp.Segment) (RoundState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 16})
	return RoundState{st}, err
}

func NewRootRoundState(s *capnp.Segment) (RoundState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 16})
	return RoundState{st}, err
}

func ReadRootRoundState(msg *capnp.Message) (RoundState, error) {
	root, err := msg.RootPtr()
	return RoundState{root.Struct()}, err
}

func (s RoundState) String() string {
	str, _ := text.Marshal(0xcfa13406e7c64206, s.Struct)
	return str
}

func (s RoundState) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RoundState) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RoundState) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s RoundState) GroupShare() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RoundState) HasGroupShare() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RoundState) SetGroupShare(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s RoundState) GroupIdx() uint8 {
	return s.Struct.Uint8(0)
}

func (s RoundState) SetGroupIdx(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s RoundState) GroupKey() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s RoundState) HasGroupKey() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RoundState) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s RoundState) RCert() RCert {
	if !s.HasRCert() {
		s.NewRCert()
	}
	p, _ := s.Struct.Ptr(3)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5592:5664])
	return RCert{Struct: ss}
}

func (s RoundState) HasRCert() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RoundState) SetRCert(v RCert) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewRCert sets the rCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s RoundState) NewRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingRCert() RCert {
	if !s.HasConflictingRCert() {
		s.NewConflictingRCert()
	}
	p, _ := s.Struct.Ptr(4)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5664:5736])
	return RCert{Struct: ss}
}

func (s RoundState) HasConflictingRCert() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingRCert(v RCert) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewConflictingRCert sets the conflictingRCert field to a newly
// allocated RCert struct, preferring placement in s's segment.
func (s RoundState) NewConflictingRCert() (RCert, error) {
	ss, err := NewRCert(s.Struct.Segment())
	if err != nil {
		return RCert{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) Proposal() Proposal {
	if !s.HasProposal() {
		s.NewProposal()
	}
	p, _ := s.Struct.Ptr(5)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5736:5936])
	return Proposal{Struct: ss}
}

func (s RoundState) HasProposal() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s RoundState) SetProposal(v Proposal) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewProposal sets the proposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s RoundState) NewProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingProposal() Proposal {
	if !s.HasConflictingProposal() {
		s.NewConflictingProposal()
	}
	p, _ := s.Struct.Ptr(6)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[5936:6136])
	return Proposal{Struct: ss}
}

func (s RoundState) HasConflictingProposal() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingProposal(v Proposal) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewConflictingProposal sets the conflictingProposal field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s RoundState) NewConflictingProposal() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) PreVote() PreVote {
	if !s.HasPreVote() {
		s.NewPreVote()
	}
	p, _ := s.Struct.Ptr(7)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6136:6360])
	return PreVote{Struct: ss}
}

func (s RoundState) HasPreVote() bool {
	p, err := s.Struct.Ptr(7)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreVote(v PreVote) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewPreVote sets the preVote field to a newly
// allocated PreVote struct, preferring placement in s's segment.
func (s RoundState) NewPreVote() (PreVote, error) {
	ss, err := NewPreVote(s.Struct.Segment())
	if err != nil {
		return PreVote{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingPreVote() PreVote {
	if !s.HasConflictingPreVote() {
		s.NewConflictingPreVote()
	}
	p, _ := s.Struct.Ptr(8)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6360:6584])
	return PreVote{Struct: ss}
}

func (s RoundState) HasConflictingPreVote() bool {
	p, err := s.Struct.Ptr(8)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingPreVote(v PreVote) error {
	return s.Struct.SetPtr(8, v.Struct.ToPtr())
}

// NewConflictingPreVote sets the conflictingPreVote field to a newly
// allocated PreVote struct, preferring placement in s's segment.
func (s RoundState) NewConflictingPreVote() (PreVote, error) {
	ss, err := NewPreVote(s.Struct.Segment())
	if err != nil {
		return PreVote{}, err
	}
	err = s.Struct.SetPtr(8, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) PreVoteNil() PreVoteNil {
	if !s.HasPreVoteNil() {
		s.NewPreVoteNil()
	}
	p, _ := s.Struct.Ptr(9)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6584:6680])
	return PreVoteNil{Struct: ss}
}

func (s RoundState) HasPreVoteNil() bool {
	p, err := s.Struct.Ptr(9)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreVoteNil(v PreVoteNil) error {
	return s.Struct.SetPtr(9, v.Struct.ToPtr())
}

// NewPreVoteNil sets the preVoteNil field to a newly
// allocated PreVoteNil struct, preferring placement in s's segment.
func (s RoundState) NewPreVoteNil() (PreVoteNil, error) {
	ss, err := NewPreVoteNil(s.Struct.Segment())
	if err != nil {
		return PreVoteNil{}, err
	}
	err = s.Struct.SetPtr(9, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ImplicitPVN() bool {
	return s.Struct.Bit(8)
}

func (s RoundState) SetImplicitPVN(v bool) {
	s.Struct.SetBit(8, v)
}

func (s RoundState) PreCommit() PreCommit {
	if !s.HasPreCommit() {
		s.NewPreCommit()
	}
	p, _ := s.Struct.Ptr(10)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6680:6920])
	return PreCommit{Struct: ss}
}

func (s RoundState) HasPreCommit() bool {
	p, err := s.Struct.Ptr(10)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreCommit(v PreCommit) error {
	return s.Struct.SetPtr(10, v.Struct.ToPtr())
}

// NewPreCommit sets the preCommit field to a newly
// allocated PreCommit struct, preferring placement in s's segment.
func (s RoundState) NewPreCommit() (PreCommit, error) {
	ss, err := NewPreCommit(s.Struct.Segment())
	if err != nil {
		return PreCommit{}, err
	}
	err = s.Struct.SetPtr(10, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingPreCommit() PreCommit {
	if !s.HasConflictingPreCommit() {
		s.NewConflictingPreCommit()
	}
	p, _ := s.Struct.Ptr(11)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[6920:7160])
	return PreCommit{Struct: ss}
}

func (s RoundState) HasConflictingPreCommit() bool {
	p, err := s.Struct.Ptr(11)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingPreCommit(v PreCommit) error {
	return s.Struct.SetPtr(11, v.Struct.ToPtr())
}

// NewConflictingPreCommit sets the conflictingPreCommit field to a newly
// allocated PreCommit struct, preferring placement in s's segment.
func (s RoundState) NewConflictingPreCommit() (PreCommit, error) {
	ss, err := NewPreCommit(s.Struct.Segment())
	if err != nil {
		return PreCommit{}, err
	}
	err = s.Struct.SetPtr(11, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) PreCommitNil() PreCommitNil {
	if !s.HasPreCommitNil() {
		s.NewPreCommitNil()
	}
	p, _ := s.Struct.Ptr(12)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7160:7256])
	return PreCommitNil{Struct: ss}
}

func (s RoundState) HasPreCommitNil() bool {
	p, err := s.Struct.Ptr(12)
	return p.IsValid() || err != nil
}

func (s RoundState) SetPreCommitNil(v PreCommitNil) error {
	return s.Struct.SetPtr(12, v.Struct.ToPtr())
}

// NewPreCommitNil sets the preCommitNil field to a newly
// allocated PreCommitNil struct, preferring placement in s's segment.
func (s RoundState) NewPreCommitNil() (PreCommitNil, error) {
	ss, err := NewPreCommitNil(s.Struct.Segment())
	if err != nil {
		return PreCommitNil{}, err
	}
	err = s.Struct.SetPtr(12, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ImplicitPCN() bool {
	return s.Struct.Bit(9)
}

func (s RoundState) SetImplicitPCN(v bool) {
	s.Struct.SetBit(9, v)
}

func (s RoundState) NextRound() NextRound {
	if !s.HasNextRound() {
		s.NewNextRound()
	}
	p, _ := s.Struct.Ptr(13)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7256:7416])
	return NextRound{Struct: ss}
}

func (s RoundState) HasNextRound() bool {
	p, err := s.Struct.Ptr(13)
	return p.IsValid() || err != nil
}

func (s RoundState) SetNextRound(v NextRound) error {
	return s.Struct.SetPtr(13, v.Struct.ToPtr())
}

// NewNextRound sets the nextRound field to a newly
// allocated NextRound struct, preferring placement in s's segment.
func (s RoundState) NewNextRound() (NextRound, error) {
	ss, err := NewNextRound(s.Struct.Segment())
	if err != nil {
		return NextRound{}, err
	}
	err = s.Struct.SetPtr(13, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) NextHeight() NextHeight {
	if !s.HasNextHeight() {
		s.NewNextHeight()
	}
	p, _ := s.Struct.Ptr(14)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7416:7680])
	return NextHeight{Struct: ss}
}

func (s RoundState) HasNextHeight() bool {
	p, err := s.Struct.Ptr(14)
	return p.IsValid() || err != nil
}

func (s RoundState) SetNextHeight(v NextHeight) error {
	return s.Struct.SetPtr(14, v.Struct.ToPtr())
}

// NewNextHeight sets the nextHeight field to a newly
// allocated NextHeight struct, preferring placement in s's segment.
func (s RoundState) NewNextHeight() (NextHeight, error) {
	ss, err := NewNextHeight(s.Struct.Segment())
	if err != nil {
		return NextHeight{}, err
	}
	err = s.Struct.SetPtr(14, ss.Struct.ToPtr())
	return ss, err
}
func (s RoundState) ConflictingNextHeight() NextHeight {
	if !s.HasConflictingNextHeight() {
		s.NewConflictingNextHeight()
	}
	p, _ := s.Struct.Ptr(15)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[7680:7944])
	return NextHeight{Struct: ss}
}

func (s RoundState) HasConflictingNextHeight() bool {
	p, err := s.Struct.Ptr(15)
	return p.IsValid() || err != nil
}

func (s RoundState) SetConflictingNextHeight(v NextHeight) error {
	return s.Struct.SetPtr(15, v.Struct.ToPtr())
}

// NewConflictingNextHeight sets the conflictingNextHeight field to a newly
// allocated NextHeight struct, preferring placement in s's segment.
func (s RoundState) NewConflictingNextHeight() (NextHeight, error) {
	ss, err := NewNextHeight(s.Struct.Segment())
	if err != nil {
		return NextHeight{}, err
	}
	err = s.Struct.SetPtr(15, ss.Struct.ToPtr())
	return ss, err
}

// RoundState_List is a list of RoundState.
type RoundState_List struct{ capnp.List }

// NewRoundState creates a new list of RoundState.
func NewRoundState_List(s *capnp.Segment, sz int32) (RoundState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 16}, sz)
	return RoundState_List{l}, err
}

func (s RoundState_List) At(i int) RoundState { return RoundState{s.List.Struct(i)} }

func (s RoundState_List) Set(i int, v RoundState) error { return s.List.SetStruct(i, v.Struct) }

func (s RoundState_List) String() string {
	str, _ := text.MarshalList(0xcfa13406e7c64206, s.List)
	return str
}

// RoundState_Promise is a wrapper for a RoundState promised by a client call.
type RoundState_Promise struct{ *capnp.Pipeline }

func (p RoundState_Promise) Struct() (RoundState, error) {
	s, err := p.Pipeline.Struct()
	return RoundState{s}, err
}

func (p RoundState_Promise) RCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_85d3acc39d94e0f8[7944:8016])}
}

func (p RoundState_Promise) ConflictingRCert() RCert_Promise {
	return RCert_Promise{Pipeline: p.Pipeline.GetPipelineDefault(4, x_85d3acc39d94e0f8[8016:8088])}
}

func (p RoundState_Promise) Proposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(5, x_85d3acc39d94e0f8[8088:8288])}
}

func (p RoundState_Promise) ConflictingProposal() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(6, x_85d3acc39d94e0f8[8288:8488])}
}

func (p RoundState_Promise) PreVote() PreVote_Promise {
	return PreVote_Promise{Pipeline: p.Pipeline.GetPipelineDefault(7, x_85d3acc39d94e0f8[8488:8712])}
}

func (p RoundState_Promise) ConflictingPreVote() PreVote_Promise {
	return PreVote_Promise{Pipeline: p.Pipeline.GetPipelineDefault(8, x_85d3acc39d94e0f8[8712:8936])}
}

func (p RoundState_Promise) PreVoteNil() PreVoteNil_Promise {
	return PreVoteNil_Promise{Pipeline: p.Pipeline.GetPipelineDefault(9, x_85d3acc39d94e0f8[8936:9032])}
}

func (p RoundState_Promise) PreCommit() PreCommit_Promise {
	return PreCommit_Promise{Pipeline: p.Pipeline.GetPipelineDefault(10, x_85d3acc39d94e0f8[9032:9272])}
}

func (p RoundState_Promise) ConflictingPreCommit() PreCommit_Promise {
	return PreCommit_Promise{Pipeline: p.Pipeline.GetPipelineDefault(11, x_85d3acc39d94e0f8[9272:9512])}
}

func (p RoundState_Promise) PreCommitNil() PreCommitNil_Promise {
	return PreCommitNil_Promise{Pipeline: p.Pipeline.GetPipelineDefault(12, x_85d3acc39d94e0f8[9512:9608])}
}

func (p RoundState_Promise) NextRound() NextRound_Promise {
	return NextRound_Promise{Pipeline: p.Pipeline.GetPipelineDefault(13, x_85d3acc39d94e0f8[9608:9768])}
}

func (p RoundState_Promise) NextHeight() NextHeight_Promise {
	return NextHeight_Promise{Pipeline: p.Pipeline.GetPipelineDefault(14, x_85d3acc39d94e0f8[9768:10032])}
}

func (p RoundState_Promise) ConflictingNextHeight() NextHeight_Promise {
	return NextHeight_Promise{Pipeline: p.Pipeline.GetPipelineDefault(15, x_85d3acc39d94e0f8[10032:10296])}
}

type OwnState struct{ capnp.Struct }

// OwnState_TypeID is the unique identifier for the type OwnState.
const OwnState_TypeID = 0xce8da0c591f7b39f

func NewOwnState(s *capnp.Segment) (OwnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return OwnState{st}, err
}

func NewRootOwnState(s *capnp.Segment) (OwnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return OwnState{st}, err
}

func ReadRootOwnState(msg *capnp.Message) (OwnState, error) {
	root, err := msg.RootPtr()
	return OwnState{root.Struct()}, err
}

func (s OwnState) String() string {
	str, _ := text.Marshal(0xce8da0c591f7b39f, s.Struct)
	return str
}

func (s OwnState) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnState) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s OwnState) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s OwnState) GroupKey() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnState) HasGroupKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s OwnState) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s OwnState) SyncToBH() BlockHeader {
	if !s.HasSyncToBH() {
		s.NewSyncToBH()
	}
	p, _ := s.Struct.Ptr(2)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10296:10432])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasSyncToBH() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s OwnState) SetSyncToBH(v BlockHeader) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSyncToBH sets the syncToBH field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewSyncToBH() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnState) MaxBHSeen() BlockHeader {
	if !s.HasMaxBHSeen() {
		s.NewMaxBHSeen()
	}
	p, _ := s.Struct.Ptr(3)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10432:10568])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasMaxBHSeen() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s OwnState) SetMaxBHSeen(v BlockHeader) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewMaxBHSeen sets the maxBHSeen field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewMaxBHSeen() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnState) CanonicalSnapShot() BlockHeader {
	if !s.HasCanonicalSnapShot() {
		s.NewCanonicalSnapShot()
	}
	p, _ := s.Struct.Ptr(4)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10568:10704])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasCanonicalSnapShot() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s OwnState) SetCanonicalSnapShot(v BlockHeader) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewCanonicalSnapShot sets the canonicalSnapShot field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewCanonicalSnapShot() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnState) PendingSnapShot() BlockHeader {
	if !s.HasPendingSnapShot() {
		s.NewPendingSnapShot()
	}
	p, _ := s.Struct.Ptr(5)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[10704:10840])
	return BlockHeader{Struct: ss}
}

func (s OwnState) HasPendingSnapShot() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s OwnState) SetPendingSnapShot(v BlockHeader) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewPendingSnapShot sets the pendingSnapShot field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s OwnState) NewPendingSnapShot() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

// OwnState_List is a list of OwnState.
type OwnState_List struct{ capnp.List }

// NewOwnState creates a new list of OwnState.
func NewOwnState_List(s *capnp.Segment, sz int32) (OwnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return OwnState_List{l}, err
}

func (s OwnState_List) At(i int) OwnState { return OwnState{s.List.Struct(i)} }

func (s OwnState_List) Set(i int, v OwnState) error { return s.List.SetStruct(i, v.Struct) }

func (s OwnState_List) String() string {
	str, _ := text.MarshalList(0xce8da0c591f7b39f, s.List)
	return str
}

// OwnState_Promise is a wrapper for a OwnState promised by a client call.
type OwnState_Promise struct{ *capnp.Pipeline }

func (p OwnState_Promise) Struct() (OwnState, error) {
	s, err := p.Pipeline.Struct()
	return OwnState{s}, err
}

func (p OwnState_Promise) SyncToBH() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(2, x_85d3acc39d94e0f8[10840:10976])}
}

func (p OwnState_Promise) MaxBHSeen() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_85d3acc39d94e0f8[10976:11112])}
}

func (p OwnState_Promise) CanonicalSnapShot() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(4, x_85d3acc39d94e0f8[11112:11248])}
}

func (p OwnState_Promise) PendingSnapShot() BlockHeader_Promise {
	return BlockHeader_Promise{Pipeline: p.Pipeline.GetPipelineDefault(5, x_85d3acc39d94e0f8[11248:11384])}
}

type OwnValidatingState struct{ capnp.Struct }

// OwnValidatingState_TypeID is the unique identifier for the type OwnValidatingState.
const OwnValidatingState_TypeID = 0xd7dde404fa3b5b03

func NewOwnValidatingState(s *capnp.Segment) (OwnValidatingState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return OwnValidatingState{st}, err
}

func NewRootOwnValidatingState(s *capnp.Segment) (OwnValidatingState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return OwnValidatingState{st}, err
}

func ReadRootOwnValidatingState(msg *capnp.Message) (OwnValidatingState, error) {
	root, err := msg.RootPtr()
	return OwnValidatingState{root.Struct()}, err
}

func (s OwnValidatingState) String() string {
	str, _ := text.Marshal(0xd7dde404fa3b5b03, s.Struct)
	return str
}

func (s OwnValidatingState) VAddr() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnValidatingState) HasVAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetVAddr(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s OwnValidatingState) GroupKey() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s OwnValidatingState) HasGroupKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetGroupKey(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s OwnValidatingState) RoundStarted() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s OwnValidatingState) SetRoundStarted(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s OwnValidatingState) PreVoteStepStarted() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s OwnValidatingState) SetPreVoteStepStarted(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s OwnValidatingState) PreCommitStepStarted() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s OwnValidatingState) SetPreCommitStepStarted(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s OwnValidatingState) ValidValue() Proposal {
	if !s.HasValidValue() {
		s.NewValidValue()
	}
	p, _ := s.Struct.Ptr(2)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[11384:11584])
	return Proposal{Struct: ss}
}

func (s OwnValidatingState) HasValidValue() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetValidValue(v Proposal) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewValidValue sets the validValue field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s OwnValidatingState) NewValidValue() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}
func (s OwnValidatingState) LockedValue() Proposal {
	if !s.HasLockedValue() {
		s.NewLockedValue()
	}
	p, _ := s.Struct.Ptr(3)
	ss, _ := p.StructDefault(x_85d3acc39d94e0f8[11584:11784])
	return Proposal{Struct: ss}
}

func (s OwnValidatingState) HasLockedValue() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s OwnValidatingState) SetLockedValue(v Proposal) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewLockedValue sets the lockedValue field to a newly
// allocated Proposal struct, preferring placement in s's segment.
func (s OwnValidatingState) NewLockedValue() (Proposal, error) {
	ss, err := NewProposal(s.Struct.Segment())
	if err != nil {
		return Proposal{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// OwnValidatingState_List is a list of OwnValidatingState.
type OwnValidatingState_List struct{ capnp.List }

// NewOwnValidatingState creates a new list of OwnValidatingState.
func NewOwnValidatingState_List(s *capnp.Segment, sz int32) (OwnValidatingState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return OwnValidatingState_List{l}, err
}

func (s OwnValidatingState_List) At(i int) OwnValidatingState {
	return OwnValidatingState{s.List.Struct(i)}
}

func (s OwnValidatingState_List) Set(i int, v OwnValidatingState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s OwnValidatingState_List) String() string {
	str, _ := text.MarshalList(0xd7dde404fa3b5b03, s.List)
	return str
}

// OwnValidatingState_Promise is a wrapper for a OwnValidatingState promised by a client call.
type OwnValidatingState_Promise struct{ *capnp.Pipeline }

func (p OwnValidatingState_Promise) Struct() (OwnValidatingState, error) {
	s, err := p.Pipeline.Struct()
	return OwnValidatingState{s}, err
}

func (p OwnValidatingState_Promise) ValidValue() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(2, x_85d3acc39d94e0f8[11784:11984])}
}

func (p OwnValidatingState_Promise) LockedValue() Proposal_Promise {
	return Proposal_Promise{Pipeline: p.Pipeline.GetPipelineDefault(3, x_85d3acc39d94e0f8[11984:12184])}
}

type EncryptedStore struct{ capnp.Struct }

// EncryptedStore_TypeID is the unique identifier for the type EncryptedStore.
const EncryptedStore_TypeID = 0xdfd8af3691b0caaa

func NewEncryptedStore(s *capnp.Segment) (EncryptedStore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return EncryptedStore{st}, err
}

func NewRootEncryptedStore(s *capnp.Segment) (EncryptedStore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return EncryptedStore{st}, err
}

func ReadRootEncryptedStore(msg *capnp.Message) (EncryptedStore, error) {
	root, err := msg.RootPtr()
	return EncryptedStore{root.Struct()}, err
}

func (s EncryptedStore) String() string {
	str, _ := text.Marshal(0xdfd8af3691b0caaa, s.Struct)
	return str
}

func (s EncryptedStore) CypherText() []byte {
	p, _ := s.Struct.Ptr(0)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasCypherText() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetCypherText(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(0, v)
}
func (s EncryptedStore) Nonce() []byte {
	p, _ := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasNonce() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetNonce(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}
func (s EncryptedStore) Kid() []byte {
	p, _ := s.Struct.Ptr(2)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasKid() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetKid(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(2, v)
}
func (s EncryptedStore) Name() []byte {
	p, _ := s.Struct.Ptr(3)
	return []byte(p.DataDefault([]byte{0x0}))
}

func (s EncryptedStore) HasName() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s EncryptedStore) SetName(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(3, v)
}

// EncryptedStore_List is a list of EncryptedStore.
type EncryptedStore_List struct{ capnp.List }

// NewEncryptedStore creates a new list of EncryptedStore.
func NewEncryptedStore_List(s *capnp.Segment, sz int32) (EncryptedStore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return EncryptedStore_List{l}, err
}

func (s EncryptedStore_List) At(i int) EncryptedStore { return EncryptedStore{s.List.Struct(i)} }

func (s EncryptedStore_List) Set(i int, v EncryptedStore) error { return s.List.SetStruct(i, v.Struct) }

func (s EncryptedStore_List) String() string {
	str, _ := text.MarshalList(0xdfd8af3691b0caaa, s.List)
	return str
}

// EncryptedStore_Promise is a wrapper for a EncryptedStore promised by a client call.
type EncryptedStore_Promise struct{ *capnp.Pipeline }

func (p EncryptedStore_Promise) Struct() (EncryptedStore, error) {
	s, err := p.Pipeline.Struct()
	return EncryptedStore{s}, err
}

const schema_85d3acc39d94e0f8 = "x\xda\xccY{pT\xe5\xd9\x7f\x9f\xf7\xdd[6\x9b" +
	"dO\xde\xf5\x13$L\x12H\xf8\xf0\x02\x1f\x10\xfd\x8a" +
	"\x88\x03ItL(\xc4\x9c=\x10\x11\xc1\xe1\x90=d" +
	"W7g\x97\xdd\x13L\xdaP\x8a\xa3\x9d\xd8\x91*-" +
	"\xde\x18E\xd0:U\x0a\x02*3\xd8\xc1\xa9bE\x89" +
	"`\x15\xc1[I\xc5\x16G\xa1^\xa0J\x0b\xc1v;" +
	"\xcf9{9{I\xb2\xd18\xd3\x19\xfe8<\xfb;" +
	"\xcf\xf9\xbd\xcf\xfd}2E,\x9cM\xa7Z/,\"" +
	"D|\xd0j\x8bM\x7fxVa\xdd\xc6\xddw\x11\xc1" +
	"m\x89\x9d=\xb6\xfe\x91\x97\xb7\xbe}'!P\xb3\xc2" +
	"V\x0a|\x8d\xcdN\x88\xd4mc \xf5\xd8(\x10\x12" +
	"{g\xe6\xcd;\x1d\x1b__\x9b\x85\xdfl\x1b\x07|" +
	"\xa7\x8e\xdf\x8a\xf8\xdd\x06\xbe\xcf\xb7\xb1j\xec&\xf1\x9e" +
	"L<\x7f\xcb\xd6\xcf\xfbt\xf8{\x08?n\xc0k\xea" +
	"~\xfft\xd3\x15]Y\xf0\x9aJ\xbb\x13\xf8T;\xe2" +
	"/\xb33\x90\xa6\xdbu|\xe3\xa49\xcf=\xf0\xc9\xab" +
	"\xd9\xf8\x87\xec\x17\x01\x7fJ\xc7\xff\x1a\xf1;\x0c\xfc\x96" +
	"=\xbd\xcbvU\xed\xbc7\x8bN\x9f\xbd\x9f\x9f\xd0\xe1" +
	"\xc7\x11~\xca\x80\xd7\xaf\xa9i:\xf7W\xbe\x8e\x88n" +
	"\xa0)\xbc\xd5b'\x84\x178\xf6r\xc1a'\xa4\xa6" +
	"\xc8q\x0f\x10\x88\x1dx\xd6\xf9\xf2c7\\r?\x11" +
	"\xdc`\x023\x04\xef,8\xc4_(\xc0\xa7\xe7\x0b\xb6" +
	"\x13\x88)\x0f<^8\xf1\xf6\xe3\x0fe`)\"^" +
	"r\x9e\xe4\x07\x9d\xf8\xb4\xdfy\x1b\x81XyK\xdf\x81" +
	"\xdd_uo\xc8\x85m,\xdc\xcb\xc5B|\x9aW\x88" +
	"\xd8\xb3\xd3'W\xb4]}zC.\x0e\x9f\x17\xf6\xf2" +
	"s:\xf6L!rX\xb0\xef\xfd\xa5\x96/\x9b\x1e\xcd" +
	"2\xc6\x09\xd7\xdf\xf9\x19\x17\x1a\xe3\x94\x8b\x81\xf4\x8dK" +
	"7\xc6\x17W]zv\xcc\xf6\xde\xc7\xb3\xe0\x9f\xbbN" +
	"\xf2s:\xfck\x17\x03o\x91\x8e\x1e]\xbe\xf4Gw" +
	"\xef\xd8\xf3D.\"\xa7]\xbd\xfc_\xf8\x02?\xe7B" +
	"\"=}\xd3\xaf\xdc\xf7\xe0\x95\xcfd\x9a\x19\x10\xf2J" +
	"\xd1^~\xb0H\xb7F\xd1'\x04b\xd2\xa7\xffXq" +
	"\xfa\x8d\xad\xaf\xe7R\xfcD\xf1_\xf8\xceb|\xdaV" +
	"\x8c\x8a7\x96\xbd\xb7\xef\xc2\x0av \x97\xe5V\x95\xf4" +
	"\xf2\xbbJ\xf0\xe9\xce\x12\xb4\xdc\xa3\xcf\xfes\xdd+\x9b" +
	"\xd6\xbe\x91\x81\xb5\xe9Vv\xf7\xf2\x05nt\xb5\xe8\xbe" +
	"\x01]m\xab\xdb\xf7\x89\xed\xf2\xcd\x7fD\xc6f\xb4[" +
	"\xffv\xe9\x07\xfc\xf9RD\xef*\xfd?\x0b\x81\xd8\xdf" +
	"\xa6\xfc\x80\xfdb\xbc\xeb\xcd\xac(}d\x8c\x17\xf8\xce" +
	"1z\xd2\x8c\xc1\xa4\x19\xa3\xdbn\xc6\xbe\xb9W-l" +
	"|\xf5\x9d\\\xb4\x9f\x1a\xb3\xd7x\x83o\x1b\x83\xb4\x8f" +
	"\x1e\xf9\xed\xe9\xc6\xc9\xa3\xde\xcd\x85]Q\xf6\x0c\xef*" +
	"\xc3\xa7\x8e2\xc4\xb2\x9b\xae\xea\xb7\x1c\xef{\x17Y\xb3" +
	"\x8cp\xae9Qv\x11\xf0s\x88\xae9S\xa6\xc7\xf3" +
	"E\xb3\xf7\xc7\x16\x96\xae\x7f?\xf3\x90\xba\xee%\xe5'" +
	"y\xa0\x1c\x9f\x94rtKx\xf1\xc5\xf3F\x89\x87\x8f" +
	"\xe6\xe2!W|\xc0\xdb+\xf0)P\x81<~\xf2\xe4" +
	"\xa5\xa5K.i\xfdsv\xe0U\xf4\xf33\x15z\xe0" +
	"U`\xe0U\xe8\xe6\xd8\\\xe3\xfeU\xed\xff\x8c\xfd0" +
	"\x0b\xbe\xa0\xb2\x9f\xcb\x95\x08_\\\xc9@\xf2W\xea\xf0" +
	"\x9b\xdc\xa3G\xff\xaer\xca\x87\xb9\x98\x04*\x0f\xf1\x8e" +
	"J\xdd6\x95\xc8dK\xef\x8eu\xff\xbf\xfd\xbdL\xac" +
	"\x9e\xdf\x17\x8c\xeb\xe7\x95\xe3\xf0i\xec8<\xe1\xf9\x9b" +
	"'\xbd\xf4\xe8\xfc\xdb?\xca\xa2a\x1d\xdf\xcf\x85\xf1H" +
	"\xc35\x9e\x814j<\xd28\xbf\xbc\xdbq\xfd\xd2\xa3" +
	"'2]^0\x9e\x02\xbf@G\xbb\x11]\xa6\xa3c" +
	"\xd7\xbd\xfd\xa7\xdf\xfcl\xb2z2+D:\x10\xbfF" +
	"\xc7w#\xbeG\xc7\x7f\xb8\xfd\x9e\x17Co<\xfeE" +
	"&\xfa\xc8x'\xf0\x8fu\xf41D\x7ffh\xdf\xbf" +
	"\xf4\xd4\xc4\xe6\xf2\x8f\xbf\xcc\xd2^]E\x81O\xad\xd2" +
	"\xcbj\x15\x96\xd5*\x1d\xcf\xab\xee[P<q\xc9\xe9" +
	"\\9\xa6T}\xc0W\xe0\x1b\xbc\xbd\x0as\xec\xfe\x7f" +
	"\x1f\xba\xf1\xc73\xc2_g\x99eM\xf5I\xbe\xb6\x1a" +
	"U\xf7T3\x90\xd6W\xeb\xaa\xcf\xfe\xef\xd3{=\x07" +
	"W\x9e\xcf\xe5\x9d\xcd\xd5\x87\xf8\xb6j=\xca\xab\xd1;" +
	"_\xa9\xdf\xd4\xbb\x1b\x0e\x9c\xcf\xa2-L(\x05^9" +
	"\x01u\x97M` M\x9c\xa0\xebn\x0d\xa9QE\x8d" +
	"v\xb0\xe8\xe4V9\xac\x86g\xf8\x94\xe5rGPk" +
	"\x8e(-!Mi\x0a@\xb0\x19\x00\xdc\xa9`%\x00" +
	"nBf\xd3Z\x0b\x15\xc6:E\x0b\x05Ap\x12\x10" +
	"\xc0I\xe8`\xea\xeaC\xed\xed\x01\xcd\xde\x14\x88+L" +
	"\x96\xf3\xbc\x14\xd2L\x85\xb3\xea\x83r\xa0=j\xe8J" +
	"\x96\xfb\x84.\xd1B-\xb5\x13)\x01\xa1\xc8\x99\xfcG" +
	"X\x9ar\x18\x9a-!\x86\xfed\x9b\x8a\xebg\xb5\x0e" +
	"&\xc8NAv\xd6:\xa8 :\x09\xc9\xe7\x83\x96\x01" +
	"?X\x17\x0c\xb5\xde\xda\xa0\xc8>\xa6D\x8c/&K" +
	"v\xe2\x8b\xa2\x83Z\x84INa\x923\xe3\x1b\xd6\x01" +
	"mT\x97f\xa3dc646SK&\xd9lE" +
	"u\x86\x02\xb4\x82X\xc6,\x84X\x00@\xd8UG\x88" +
	"\xb8\x83\x81\xb8\x87\x82\x00\xe0\x01\x14>?\x83\x10\xf19" +
	"\x06\xe2\x8b\x14\x80z\x80\x02\x08/x\x09\x11\xf70\x10" +
	"_\xa3 0\xea\x01\x06 \xec\xc7\xb7\xff\xc0@|\x93" +
	"\x82`\x01\x0fX\x00\x84\x83\xf8\xf6k\x0c\xc4\xc3\x14\x04" +
	"+\xf5\x80\x15@8\x82\xaf\x1ff \x1e\xa3 \xd8\x98" +
	"\x07l\x00\xc2G\x8b\x08\x11\x8f1\x10?\xa3\xb0\xba\xd5" +
	"/\x07\xd4\xc6k\xc0A(8\x08\xcc\xf2+\x816\xbf" +
	"\x96\xf8o,\x1cQV\xa2i\x09\xdc\x0aE\x84B\x11" +
	"!\xe8\x07\xb2Z\xeb\xac\x0fu\xa8I\xe0,\xad\xd3\x1b" +
	"\x0aii\x98XT\x935\xc5\x1b\x0a\x11\xc8\xf8\xc1\xaf" +
	"\xc8>%\xe2\x0d\x11\x96\xf9J\x96\xfd\x12\x81\x04\x1aZ" +
	"\xd0\x95\xb4\xe0\xb5s\x08\x11\xafa 6\x9b,\xf8\x14" +
	"\x1e\xf7I\x06\xe2s\x14\x04\x1a7\xe1\xae9)\xb3\xc6" +
	"\xc2\x91P8\x14\x95\x83\x84\x10p\xa7\xe6\x96TP\xe6" +
	"\x1f\x8b4\x16\x0d\xb4\xa9\xb2\xd6\x11!\xa0\xa4\x9f\"l" +
	"\xa4~\x14\xbf\x92\xdf\xf1J4#\xabEG\xf2\x84\x17" +
	"O#D\xacb N1\x9d\xb0\x11O\xd8\xc0@\x9c" +
	"O\xa1<R\xafD4p\xa7\xba\xb1)w\xcdI:" +
	" \xcfl:\xa6h51\xa9\xcb\xc1d\x01\xd2kf" +
	" .\xa6\xb0z\x99\xf1^^9\x927\xed\x1c\xc6J" +
	"8/#\x16\x90\xdfl\x06\xe2\\\x13\xbf\xfb\xd0R\xeb" +
	"\x19\x88\x9bL\xb1\xb0\x19ca\x13\x03q+\x85\xd5\xe1" +
	"$\xe9oY\xfc\x06\xb4\xab\xd6\xd9\x10\xf5\xcf\x8djC" +
	"\xfb?^g\x1a\xca\xf5\xb4\xc32\x93\xc8\xbc\x81\xa0\xde" +
	"\x92P\x87\xea\x1b\x14\xd9\xe4\x8d\xbb1\xd3N\xd3r\xd8" +
	"IA\xe3-e \x06Mv\xeaB;u2\x10\xef" +
	"\xc8?\xccVG\x92\xf6L\x8e\xd6\x89 \x00\x03C\xd0" +
	"d\x92_\x8e(C[\xc6k\x0aEw\xf2\x082\xb2" +
	"]\xcc@\xf4\x9b\x8f0#\xc7\x11\x02xX\x1f\x031" +
	"L\x01\x98Q8\xdb1&\x82\x0c\xc4\xce!+_y" +
	"\x04\xcd<d\x1d\xccQ\xf0\xe3\x8d\xc8\xee\xd3\x1b\xd1P" +
	"a\xba\x02-\x1df v\x9b\xb8\xafBa7\x03\xb1" +
	"g\x98\xb9\x85\xf6\xbd.\x12\xea\x08g\xd97\xff\x90l" +
	"j0G\x8f\xa9\x0a \xa9\x89\x0c\xc4\xcbM\xf4\xd7\xa2" +
	"\xf0n\x06\xe2\x83\xdfCq\xcd3R\xae\xbfM\x95\xb0" +
	"\xd3\x18\x84G%\x09?4\xcdT\x01\x12\x84\xcd\x15 " +
	"i\xefm(\xdc\xca@\xdc\x8d]6\x1e,\xa71X" +
	"N1\x10\xbf\xc1.k\xd1\xbb,\xbf\x02~I\x884" +
	"\x1d\x18H\xd7\x006Z\xab\xdeh\xf9*\xb8\x1dge" +
	"\x94\xf7\x00\x85\xf2\x95\xb5>_$\x9dw\x1b\xfa\xe5\x87" +
	"JW\xd6\x81\xa2]j\xeb\xfcP]\x83a\xb6\xe1\x8c" +
	"-\xedrg]\x83\xa4(\x04\xd4\xe1\x0e<\xb2\x1aR" +
	"\x03\xad2\x04%U\x0eK\xfe\x10h\xc3\xd4\x10VT" +
	"_@m\x93\xc0x_#\xdfu\xe4\xf2b\xc2I\x9a" +
	"\xcc4\x05\xfd87\xe1Gn\xa5\xd3\x08\xf1R\x06\x92" +
	"\x8b\xa6<\xc9\x8b\xe8\"\xbc\xfc\xa0|\x14MNL|" +
	"4\x9dC\x884\x0a\xc5U454\xf1J]^\x81" +
	"\xf2\xcbPna\x86G'\xa1vi\"\xca/G\xb9" +
	"\xd5bxt\x1e\xfd9!R3\xca\x17\xa3\xdcf\xd5" +
	"\xa7'\xde\xa1\xeb\xd1P\xfeS\x94\xdbm\x1e\xb0\x03\xf0" +
	"\xf7\xe9c\x84HGQ\xfe)\xca\x1dv\x0f8\x00x" +
	"-\xab#D\x9a\xc9\x18H\x0d\x8c\x82P\xe0\xf0@\x01" +
	"\x00\xdf\xc66\x10\"\xed@\xf9\x1e\x94;\x0b<\xe0D" +
	"\x9e\x16<V\x85\x05ybF\x14:<P\x08\xc0E" +
	"\xcb2\xe4\x83\xf2\xc5(w9=\xe0\x02\xe07Z\xbc" +
	"\x84H\x0bQ\xeeCyQ\xa1\x07\x8a\x00\xf8[\x96-" +
	"\x84H\x87Q~\x0c\xe5\xc5.\x0f\x14\xe3\xb9\xac\xb7\x10" +
	"\"\xcd\xb52\x90\x16Z)\x08%\x05\x1e(\xc1\x08\xb6" +
	"\xa2\xfen\x94\xf7\xa0\xdc]\xe4\x017\x00\xbf\xd3\x8a\xfa" +
	"\xef@\xf9\xbd(\x17\x8a=\xe8\x03~\xc4\x8a<\x0f\xa3" +
	"\xfc\x18\xcaKK<P\x8a|l\xcf\xe0\xd5\xd8\x86W" +
	"c\xdb \x99 \xf9e\xc2\"J\x8e_\x1a}\x9d\x98" +
	"\x0a6B\xc1F`\xc0\xbc\x19\xce\x1c\xb1<\x18h\xd5" +
	" \xa0\xb6y\xf1\x1d=\xcf\x86zkD\x8b\x99\x99\x82" +
	">\xc5\xd8\xa3r\xf0;\xab]\x1d\x9f3\xc1\x9dZ\xde" +
	"\xa4\xae\x82LX2\xac\xbb\x15\xcb`\xa9\xb4\x84\xd8\xc8" +
	"\xe9\x8eSm\",\x10\xcc\xfb.\x1ch\x0f\x07\x03\xad" +
	"\x01\x8d\xd8\x9b[\x9a\x00\x08\x050z\xb1>3\x13\xbd" +
	"f\x8d\xe0\xc5\xd2|\xf8\xfaP\x09^_G\xf0\x03I" +
	"\xda\xfa\xac\x9f\xf7\xf5\xddd\x83\xfa\x94\x0dT\xa5S\xc3" +
	"\x82I\xc0\x07\xee\xd4\xf2\xc9\xec\xa1\xab\x91\x9fXAA" +
	"\x98\x94\xae\x93\x19\x8aQE\x83\x12h#\xcc\x8f\xc7L" +
	"n_\xcc\xa1\xd8\xee\x14\xda\x9d\xc3w\xb75\xcd\x9aM" +
	"\xf8!c\xc0\xfd>\xbe\xa3w\x11K\xc6\x94\xdc\xd4\xd1" +
	"\xbeL\x89\xcc\x8f\xc8jTn\xd5\x02!\x15\xa2\x83\x8e" +
	"\xcc\xf1eM^#\x8f\xf7{\x1cy\x06\xbf\xa7A\x82" +
	"n\xb9^\xc7\xf2\xb8\xa5]\x8d'\x98\xc9@l\xa0y" +
	"\x0f\xe8\xb9\x07\xc8\xac\xc5\xcb\xf5\xb7\xa9-r0\xe0\x93" +
	"5\x1c\x03\x92}\xdb\xb4\xe4\x98\x96c\xc9\xf1\xc2\x9c\xd4" +
	"B#\xb1\xe4\xd8\x7f\x8biu\xc1\xc0\x18\xbf\xde\xda`" +
	"Z]X\xa8\xb1\xe4\xe8\xdb\x92Z]$\x97\x1c'\x16" +
	"\x11\"~\xca@\xfc:\xb5\xe4\xe0\xf3\x00\xdb\xd9\\\x1c" +
	"\xc8\x16\x0ew \x8b\xc4'\x11R\x12\xd1\x14\x1fX\x09" +
	"\x05\xabQw0F$\xd0\x94\xb0\xa4\xc9\x11\x8d\xa5\xff" +
	"\x18\xdfSH\xc6\xcf\xe9\xef\xaeDK\xb5\xc8A\xc2:" +
	"\x94\xef\x1e(x\xc5P|-2\xb1\x07GB]V" +
	"6\xc4\xfd\x1a*\x89H\x8a\x96q\x01[\x14\xbfku" +
	"\x9b\x9cj\xbe\xaf$\x9cz\x17\xa6I\x0f\x03q\xbd\xc9" +
	"\xa9\xebPx/\x03\xf1a\x1a\xb7\x89\xac\x85\x08\x8bD" +
	"\xa1\x98@3\x03<KbUK\x00\x8a\xd1#\xf6\xd9" +
	"t`W\xa9!\xadNY\x1e\xd2S&\x91\xdc\x8a\xe6" +
	"\xc7\xba\xe6\xc7\xfe0T\xc27\xb1\xff\x86\xb5Kr#" +
	"k\x902\xb6\x8d#\xd5\xd2so\x11\xd2\x16\x9b\x03\x97" +
	"\x83\xec\xdba\xbc\xf1\x80/\x8fRi\xbeo\xc7\xd4\xe4" +
	"V\x02Ke\xf2/u\xa6\x90\x1d\xb0Y\x0d\xc7\x96\xd7" +
	"\xaa\xad\x91\xae\xb0\xa6\xcc\xf2IZ(\xa2\x0c\x10\xbdA" +
	"3K\xf4\xb8\x9f\x81\xa8\x99\xae\x84\x1d\xe3L\xf7\xf2\xc4" +
	"\x95p\xd5%\xa9\xb5H\xac\xb5+\xecW\"\xf3\x15\xc2" +
	":\xd3\x97\x98\xe5jHmM\xa7i\xbf5\xe0K\x13" +
	"\x94\xa8r{\x9eQQ?\xcbXT\xe4\xea_\x99[" +
	"\xf0\xe4\xdd\xdd\xf0k\xf2/\x91#\x11B\xd9+\xfex" +
	"\xeb3\xbe5B5(\xebD\xf1x\xf3%\xfe\x90\xf0" +
	"\xadf\x9d\x01\xb5{\xd3\xec5\xcc\xa0\xcc\x99\x1cXz" +
	"\x98?\x9fm\xf5.oj1\x9d\x8c\xbb\x970B_" +
	"d \x1e\xc0\x94i0\xa7\xcc\x88xs\xb0\x9d\xb51" +
	"\x9e2-\x9a_`zK\xe2C\xc8\xb7\xd9\xe5&Z" +
	"\x0cD\xf2(\xbfS\xd1(S\x18\x883\x87{\xa1\x1c" +
	",\xac\xf4&\x01\xf1\x03\x8c\xe8X\xfa\x9f\x00\x00\x00\xff" +
	"\xff\x82\xc8\xfb\xa9"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x89b89e420b3f9c38,
		0x8dcb9e08b15e3cd6,
		0x8f51a01d249e64dd,
		0x8f79354eaebf4233,
		0x8fc7e797b44a2d49,
		0x90b124b562cabcaa,
		0x9113e3f94e338143,
		0x962a57a2c30ab3cc,
		0x99e482280ba39765,
		0x9a7cf3b8ccdd561f,
		0x9af13d67202e38f8,
		0x9f4eef0460d9c655,
		0xa3caaf1bf82b3bee,
		0xa5bcb08c7a601f19,
		0xb23998c63938dd88,
		0xcbaccef171f6e853,
		0xcc032017c6d81c9e,
		0xce8da0c591f7b39f,
		0xcfa13406e7c64206,
		0xd00c238e033730eb,
		0xd6c749583b4cc63a,
		0xd7182e49f1abd5dc,
		0xd7dde404fa3b5b03,
		0xd9941258ffc9401a,
		0xdcd451184d295c70,
		0xde632a5d122ba87e,
		0xdf1d1641931033a1,
		0xdf3021ba1919105b,
		0xdfd8af3691b0caaa,
		0xe182549fc12d5efb,
		0xe9dc604f08007c66,
		0xea6e2e86a7dbd347,
		0xeea300ce6fc08faf,
		0xefe51f5028f060c9,
		0xf15d280e55952413,
		0xf4703a7b59d2fe96,
		0xfb76cd14c2ae27f8,
		0xfbcc481043fc6ef3)
}

var x_85d3acc39d94e0f8 = []byte{
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	61, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 5, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2, 0, 0, 0,
	1, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	61, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 3, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	97, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 2, 0,
	29, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	61, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	32, 0, 0, 0, 2, 0, 1, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	109, 0, 0, 0, 10, 0, 0, 0,
	4, 0, 0, 0, 0, 0, 3, 0,
	93, 0, 0, 0, 10, 0, 0, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 2, 0, 4, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	45, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 0,
	8, 0, 0, 0, 0, 0, 2, 0,
	81, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 4, 0,
	40, 0, 0, 0, 0, 0, 2, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	13, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	4, 0, 0, 0, 2, 0, 1, 0,
	17, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	1, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
}
